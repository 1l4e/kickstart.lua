-- require('mason').setup()
-- require('mason-lspconfig').setup()
--
-- local on_attach = function(_, bufnr)
--     local nmap = function(keys, func, desc)
--         if desc then
--             desc = 'LSP: ' .. desc
--         end
--         vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
--     end
--
--     nmap('<leader>vrn', vim.lsp.buf.rename, '[R]e[n]ame')
--     nmap('<leader>vca', vim.lsp.buf.code_action, '[C]ode [A]ction')
--
--     nmap('gd', require('telescope.builtin').lsp_definitions, '[G]oto [D]efinition')
--     nmap('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
--     nmap('gI', require('telescope.builtin').lsp_implementations, '[G]oto [I]mplementation')
--     nmap('<leader>de', require('telescope.builtin').lsp_type_definitions, 'Type [D]efinition')
--     nmap('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
--     nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')
--
--     -- See `:help K` for why this keymap
--     nmap('K', vim.lsp.buf.hover, 'Hover Documentation')
--     nmap('<C-k>', vim.lsp.buf.signature_help, 'Signature Documentation')
--
--     -- Lesser used LSP functionality
--     nmap('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')
--     nmap('<leader>wa', vim.lsp.buf.add_workspace_folder, '[W]orkspace [A]dd Folder')
--     nmap('<leader>wr', vim.lsp.buf.remove_workspace_folder, '[W]orkspace [R]emove Folder')
--     nmap('<leader>wl', function()
--         print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
--     end, '[W]orkspace [L]ist Folders')
--
--     -- Create a command `:Format` local to the LSP buffer
--     vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
--         vim.lsp.buf.format()
--     end, { desc = 'Format current buffer with LSP' })
-- end
-- local servers = {
--     lua_ls = {
--         Lua = {
--             workspace = { checkThirdParty = "Disable" },
--             telemetry = { enable = false },
--         },
--     },
-- }
--
-- local capabilities = vim.lsp.protocol.make_client_capabilities()
-- capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)
--
-- -- Ensure the servers above are installed
-- local mason_lspconfig = require 'mason-lspconfig'
--
-- mason_lspconfig.setup {
--     ensure_installed = vim.tbl_keys(servers),
-- }
--
-- mason_lspconfig.setup_handlers {
--     function(server_name)
--         require('lspconfig')[server_name].setup {
--             capabilities = capabilities,
--             on_attach = on_attach,
--             settings = servers[server_name],
--             filetypes = (servers[server_name] or {}).filetypes,
--         }
--     end,
-- }
--
-- local cmp = require 'cmp'
-- local luasnip = require 'luasnip'
-- require('luasnip.loaders.from_vscode').lazy_load()
-- luasnip.config.setup {}
-- local lspkind = require('lspkind')
--
-- cmp.setup {
--     snippet = {
--         expand = function(args)
--             luasnip.lsp_expand(args.body)
--         end,
--     },
--     mapping = cmp.mapping.preset.insert {
--         ['<C-n>'] = cmp.mapping.select_next_item(),
--         ['<C-p>'] = cmp.mapping.select_prev_item(),
--         ['<C-d>'] = cmp.mapping.scroll_docs(-4),
--         ['<C-f>'] = cmp.mapping.scroll_docs(4),
--         ['<C-Space>'] = cmp.mapping.complete {},
--         ['<CR>'] = cmp.mapping.confirm {
--             behavior = cmp.ConfirmBehavior.Replace,
--             select = true,
--         },
--         ['<Tab>'] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--                 cmp.select_next_item()
--             elseif luasnip.expand_or_locally_jumpable() then
--                 luasnip.expand_or_jump()
--             else
--                 fallback()
--             end
--         end, { 'i', 's' }),
--         ['<S-Tab>'] = cmp.mapping(function(fallback)
--             if cmp.visible() then
--                 cmp.select_prev_item()
--             elseif luasnip.locally_jumpable(-1) then
--                 luasnip.jump(-1)
--             else
--                 fallback()
--             end
--         end, { 'i', 's' }),
--     },
--     sources = {
--         { name = 'nvim_lsp' },
--         { name = 'luasnip' },
--     },
--     formatting = {
--         fields = { 'abbr', 'kind', 'menu' },
--         format = lspkind.cmp_format({
--             mode = 'symbol_text', -- show only symbol annotations
--             maxwidth = 50,
--             ellipsis_char = '...',
--             preset = 'default',
--             symbol_map = {
--                 Text = "",
--                 Method = "",
--                 Function = "󰊕",
--                 Constructor = "",
--                 Field = "",
--                 Variable = "",
--                 Class = "",
--                 Interface = "",
--                 Module = "",
--                 Property = "",
--                 Unit = "",
--                 Value = "",
--                 Enum = "",
--                 Keyword = "",
--                 Snippet = "",
--                 Color = "",
--                 File = "",
--                 Reference = "",
--                 Folder = "",
--                 EnumMember = "",
--                 Constant = "",
--                 Struct = "",
--                 Event = "",
--                 Operator = "",
--                 TypeParameter = "",
--             },
--             -- before = function(entry, vim_item) -- for tailwind css autocomplete
--             --     if vim_item.kind == 'Color' and entry.completion_item.documentation then
--             --         local _, _, r, g, b = string.find(entry.completion_item.documentation, '^rgb%((%d+), (%d+), (%d+)')
--             --         if r then
--             --             local color = string.format('%02x', r) .. string.format('%02x', g) .. string.format('%02x', b)
--             --             local group = 'Tw_' .. color
--             --             if vim.fn.hlID(group) < 1 then
--             --                 vim.api.nvim_set_hl(0, group, { fg = '#' .. color })
--             --             end
--             --             vim_item.kind = "■ Color" -- or "⬤" or anything
--             --             vim_item.kind_hl_group = group
--             --             return vim_item
--             --         end
--             --     end
--             --     -- vim_item.kind = icons[vim_item.kind] and (icons[vim_item.kind] .. vim_item.kind) or vim_item.kind
--             --     -- or just show the icon
--             --     vim_item.kind = lspkind.symbolic(vim_item.kind) and
--             --         (lspkind.symbolic(vim_item.kind) .. " " .. vim_item.kind) or vim_item.kind
--             --     return vim_item
--             -- end
--         })
--     },
-- }
